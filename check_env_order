#!/usr/bin/env python
''''
Author:  Chris Burns (cburns@carngiescience.edu)

This script scans through a LaTeX document, compiling the labels defined
in table and figure environments. It then checks to see if the order in which
these labels are cross-referenced within the rest of the text matches up.'''

import sys,os,string,re
import argparse

input_pat = re.compile(r'\\input\{([^\}]+)\}')
check_envs = ['figure','table','deluxetable']
ref_pat = re.compile(r'\\ref\{([^\}]+)\}')
lab_pat = re.compile(r'\\label\{([^\}]+)\}')
env_pat = re.compile(r'\\begin\{([a-zA-A]+)\*?\}')
end_pat = re.compile(r'\\end\{([a-zA-A]+)\*?\}')

parser = argparse.ArgumentParser(description="Check the order of the figures in your LaTeX document agains the order in which they are referred to. Let's you know if you need to re-order.")
parser.add_argument('texfile', help="LaTeX file to analyze. It is not altered")
parser.add_argument('-v','--verbose', action="store_true")
args = parser.parse_args()

f = open(args.texfile)
lines = f.readlines()
f.close()

# First find if there are any \intput statements
alllines = []
for line in lines:
   res = input_pat.search(line)
   if res:
      f = open(res.group(1))
      alllines = alllines + f.readlines()
      f.close()
   else:
      alllines.append(line)

refs = []
labs = {}
for env in check_envs:
   labs[env] = []
in_environment = None
for line in alllines:
   line = string.strip(line)
   if len(line) == 0:  continue
   if line[0] == '%':  continue
   res = env_pat.search(line)
   if res:
      if res.group(1) in check_envs:
         in_environment = res.group(1)
         if args.verbose:  print("Entering {} environment".format(res.group(1)))
   res = lab_pat.search(line)
   if res and in_environment is not None:
      if res.group(1) not in labs[in_environment]:
         labs[in_environment].append(res.group(1))
         if args.verbose: print("Found label {}".format(res.group(1)))
      else:
         print("Warning:  multiple definitions of ",res.group(1))
   res = end_pat.search(line)
   if res and in_environment is not None:
      if res.group(1) == in_environment:
         in_environment = None
         if args.verbose: print("Leaving {} environment".format(res.group(1)))
      else:
         print("Something seriously wrong with your {} environment".format(
               in_environment))
         sys.exit(1)
   res = ref_pat.search(line)
   if res:
      if res.group(1) not in refs:
         refs.append(res.group(1))
         if args.verbose: print("Found reference to {}.".format(res.group(1)))

for env in labs:
   print("Results for {} environments".format(env))
   undefined_refs = [ref for ref in refs if ref not in labs[env]]
   unused_labs = [lab for lab in labs[env] if lab not in refs]

   if len(unused_labs) > 0:
      print("   Warning:  you never refer to these labels:")
      print("   "+string.join(unused_labs))

   common_labs = [lab for lab in labs[env] if lab in refs]
   common_refs = [ref for ref in refs if ref in labs[env]]
   for i in range(len(common_labs)):
      if common_labs[i] != common_refs[i]:
         print("   Sorry, your labels are out of order.  Here's how they should appear.")
         print("   Left column is how they should be ordered. Right columns is how they are currently ordered")
         for lab1,lab2 in zip(common_refs,common_labs):
            print("      {:30s} {:30s}".format(lab1,lab2))
         sys.exit(0)
   print("   Label order looks good")


