#!/usr/bin/env python
r'''
Author:  Chris Burns (cburns@obs.carnegiescience.edu)

This script is run with one argument:  the name of a .bbl file generated by
LaTeX and BibTeX. It parses each \bibitem entry and extract the list of
authors. It then performs the following logic:

   - If number of authors is less than 5 (override with -maxauth) 
   - If number of authors is > 5:, replace with author1, author2, author3 et al.
'''

import sys,string,os
import argparse
import re

parser = argparse.ArgumentParser(description="Fix a .bbl (bibliography) file to conform with Journal style: maximum of 5 authors per citation, otherwise 3 authors with 'et al.' following. A backup of your .bbl file will be made")
parser.add_argument("bblfile", help=".bbl file to fix")
parser.add_argument("--maxauth", help="Maximum number of authors per citation",
                    type=int, default=5)
parser.parse_args()

# Maximum number of authors, otherwise, use the et al. notation
max_authors = parser.maxauth
# When maximum number of authors is exceeded, how many do we
#  list before 'et al.'?
n_etal_authors = 3

# Splits bibitem into short-author, key, and bibdata
pat1 = re.compile(r'\\bibitem\[(.*?)\]{(.*?)}(.*)$')
# Get the short version of the short-author
pat2 = re.compile(r'{(.*\(.*?\))')
# Get the list of authors
pat3 = re.compile(r'{?[^,&]+}?,[^,0-9&]+')
# Get the trailing stuff
pat4 = re.compile(r'[0-9][0-9][0-9][0-9].*$')

f = open(parser.bblfile)
lines = f.readlines()
lines = map(string.strip, lines)
f.close()

# Make a backup
f = open(parser.bblfile+'.backup','w')
for line in lines:
   print >>f, line
f.close()

# Now open the original for writing
f = open(parser.bblfile, 'w')

bibitems = []
preamble = []
start = 0
for line in lines:
   if start:
      if line == '':
         bibitems.append("")
      else:
         bibitems[-1] += line
   else:
      if line == '':
         bibitems.append("")
         start = 1
      else:
         preamble.append(line)

# Output the stuff before the first \bibitem
for line in preamble:
   f.write("line"+"\n")

# Parse the \bibitems
for item in bibitems[:-1]:
   try:
      short,key,bibdata = pat1.search(item).groups()
   except:
      sys.stderr.write("Failed to parse this bibitem:\n")
      sys.stderr.write("\t"+item+"\n")

   str = '\\bibitem['
   try:
      short = pat2.search(short).group(0)
   except:
      sys.stderr.write("Failed to parse the short-author:\n")
      sys.stderr.write(short+"\n")
   str += short + "}]{"
   str += key + "}"

   # Get the end data
   try:
      res = pat4.search(bibdata)
      end = res.group(0)
      ind = res.start() + 4
   except:
      sys.stderr.write("Failed to parse the final data:\n")
      sys.stderr.write("\t"+bibdata+"\n")

   # Now deal with the number of authors
   try:
      #authors = pat3.findall(bibdata[:ind].replace('\&',''))
      authors = pat3.findall(bibdata[:ind])
   except:
      sys.stderr.write("Failed to parse the bibdata for authors:\n")
      sys.stderr.write(bibdata+"\n")

   if type(authors) == type(""):
      str += authors
   elif len(authors) == 0:
      sys.stderr.write("WARNING:  no authors for citation {}\n".format(key))
   elif len(authors) == 1:
      str += authors[0]
   elif len(authors) <= max_authors:
      m = min(max_authors-1,len(authors)-1)
      for a in authors[:m]:
         str += a + ','
      str += " \\& " + authors[m]
   else:
      for k in range(n_etal_authors):
         str += authors[k] + ", "
      str += "et al. "

   str += " "+end
   f.write(str + "\n\n")

f.write(bibitems[-1]+"\n")

